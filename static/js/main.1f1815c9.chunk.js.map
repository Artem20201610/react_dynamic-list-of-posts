{"version":3,"sources":["components/PostsList/PostsList.jsx","types.js","api/api.js","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/Loader/Loader.jsx","api/posts.js","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["PostsList","PropTypes","shape","id","number","isRequired","userId","title","string","body","posts","selectedPostId","setSelectedPostId","className","map","post","key","type","onClick","BASE_URL","getPostComments","postId","fetch","then","response","json","comments","data","filter","comment","deleteComment","commentId","a","method","addNewComment","JSON","stringify","NewCommentForm","showComments","setLoadingComments","useState","userName","setUserName","email","setEmail","setComment","onSubmit","event","newComment","name","preventDefault","placeholder","value","onChange","target","required","Loader","getUserPosts","PostDetails","postDetails","setPostDetails","isCommentsVisible","setVisibilityOfComments","setComments","loading","setLoading","loadingComments","commentsFromServer","useEffect","postDetailsFromServer","loadData","removeComment","dataset","commentid","currentVisibility","length","data-commentid","App","setPosts","selectedUser","setSelectedUser","postsFromServer","loadPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f1815c9.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PostType } from '../../types';\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  posts,\n  selectedPostId,\n  setSelectedPostId,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li\n          key={post.id}\n          className=\"PostsList__item\"\n        >\n          <div>\n            <b>\n              [User #\n              {post.userId}\n              ]:\n            </b>\n            {post.body}\n          </div>\n          {selectedPostId === post.id\n            ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  setSelectedPostId(null);\n                }}\n              >\n                Close\n              </button>\n            )\n            : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  setSelectedPostId(post.id);\n                }}\n              >\n                Open\n              </button>\n            )}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PostType.isRequired).isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  setSelectedPostId: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const PostType = PropTypes.shape({\n  id: PropTypes.number.isRequired,\n  userId: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n});\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport const getPostComments = postId => fetch(`${BASE_URL}/comments`)\n  .then(response => response.json())\n  .then(comments => comments.data)\n  .then(comments => comments.filter(comment => postId === comment.postId));\n\nexport const deleteComment = async(commentId) => {\n  await fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const addNewComment = async(comment) => {\n  await fetch(`${BASE_URL}/comments`, {\n    method: 'Post',\n    body: JSON.stringify(comment),\n  });\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { addNewComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({\n  postId,\n  showComments,\n  setLoadingComments,\n}) => {\n  const [userName, setUserName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const resetForm = () => {\n    setUserName('');\n    setEmail('');\n    setComment('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={async(event) => {\n        setLoadingComments(true);\n\n        const newComment = {\n          postId,\n          name: userName,\n          email,\n          body: comment,\n        };\n\n        event.preventDefault();\n        resetForm();\n\n        await addNewComment(newComment);\n        await showComments();\n\n        setLoadingComments(false);\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          value={userName}\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => {\n            setUserName(target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          value={email}\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => {\n            setEmail(target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          value={comment}\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => {\n            setComment(target.value);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  showComments: PropTypes.func.isRequired,\n  setLoadingComments: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = userId => fetch(`${BASE_URL}/posts`)\n  .then(response => response.json())\n  .then(posts => posts.data)\n  .then(posts => posts\n    .filter(post => (userId === 0 ? true : post.userId === userId)));\n\nexport const getPostDetails = postId => fetch(`${BASE_URL}/posts/${postId}`)\n  .then(response => response.json())\n  .then(postDetails => postDetails.data);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deleteComment } from '../../api/comments';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState(null);\n  const [isCommentsVisible, setVisibilityOfComments] = useState(true);\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [loadingComments, setLoadingComments] = useState(false);\n  const showComments = async() => {\n    const commentsFromServer = await getPostComments(selectedPostId);\n\n    await setComments(commentsFromServer);\n  };\n\n  useEffect(() => {\n    setLoading(true);\n\n    const loadData = async() => {\n      await getPostDetails(selectedPostId)\n        .then((postDetailsFromServer) => {\n          setPostDetails(postDetailsFromServer);\n        });\n\n      await showComments();\n      setLoading(false);\n    };\n\n    loadData();\n  }, [selectedPostId]);\n\n  const removeComment = async({ target }) => {\n    setLoadingComments(true);\n\n    await deleteComment(target.dataset.commentid);\n    await showComments();\n\n    setLoadingComments(false);\n  };\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails.body}</p>\n      </section>\n\n      {loadingComments\n        ? <Loader />\n        : (\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setVisibilityOfComments(\n                  currentVisibility => !currentVisibility,\n                );\n              }}\n            >\n              {isCommentsVisible ? 'Hide' : 'Show'}\n              {' '}\n              {comments.length}\n              {' '}\n              comments\n            </button>\n\n            {isCommentsVisible\n              ? (\n                <ul className=\"PostDetails__list\">\n                  {comments.map(comment => (\n                    <li\n                      key={comment.id}\n                      className=\"PostDetails__list-item\"\n                    >\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        data-commentid={comment.id}\n                        onClick={removeComment}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )\n              : ''}\n          </section>\n        )\n      }\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postDetails.id}\n            showComments={showComments}\n            setLoadingComments={setLoadingComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Loader } from './components/Loader';\n\nimport { getUserPosts } from './api/posts';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n\n    const loadPosts = async() => {\n      const postsFromServer = await getUserPosts(selectedUser);\n\n      setPosts(postsFromServer);\n      setLoading(false);\n    };\n\n    loadPosts();\n  }, [selectedUser]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUser}\n            onChange={({ target }) => {\n              setSelectedUser(+target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {loading\n            ? <Loader />\n            : (\n              <PostsList\n                posts={posts}\n                setSelectedPostId={setSelectedPostId}\n                selectedPostId={selectedPostId}\n              />\n            )}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            && (\n            <PostDetails\n              selectedPostId={selectedPostId}\n            />\n            )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}